"""
Django settings for ai_recipes project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
# from decouple import Config, RepositoryEnv
# from decouple import config
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "-$n57f@!^a#*8+fe0=efti)ce19r42)z@iufdt#)-(hik&3+4&")

# # Determine environment
# ENVIRONMENT = config("ENVIRONMENT", default="dev")

# # Load environment-specific configuration
# if ENVIRONMENT == "prod":
#     env_file = BASE_DIR / "envs" / "prod.env"
# else:
#     env_file = BASE_DIR / "envs" / "dev.env"

# # Load environment variables from the appropriate file

# if env_file.exists():
#     env_config = Config(RepositoryEnv(str(env_file)))
# else:
#     env_config = config  # fallback to default config


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "138.68.108.166",
    "macromates.ch",
]

CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://138.68.108.166",
    "https://macromates.ch",
]

# Setup support for proxy headers
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "drf_yasg",
]

LOCAL_APPS = [
    'customUser',
    'authentication',
    'usergoal',
    'userday',
    'usermonth',
    'foodPhoto',
    'foodItem',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('POSTGRES_DB'),
        "PORT": os.environ.get('POSTGRES_PORT'),
        "HOST": os.environ.get('POSTGRES_HOST'),
        "USER": os.environ.get('POSTGRES_USER'),
        "PASSWORD": os.environ.get('POSTGRES_PASSWORD'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization.
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static-files/'  # URL prefix for static files
STATIC_ROOT = os.path.join(BASE_DIR, 'static-files') if DEBUG else '/static-files/'

MEDIA_URL = '/media-files/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media-files') if DEBUG else '/media-files/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    # "DEFAULT_PERMISSION_CLASSES": [
    #     "rest_framework.permissions.IsAuthenticated",
    # ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    # "DEFAULT_RENDERER_CLASSES": [
    #     "rest_framework.renderers.JSONRenderer",
    # ],
    # "DEFAULT_PARSER_CLASSES": [
    #     "rest_framework.parsers.JSONParser",
    #     "rest_framework.parsers.MultiPartParser",
    #     "rest_framework.parsers.FormParser",
    # ],
}

# Simple JWT configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),

}

# OpenAI API configuration
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# # Email configuration
# EMAIL_BACKEND = env_config(
#     "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
# )
# EMAIL_HOST = env_config("EMAIL_HOST", default="smtp.gmail.com")
# EMAIL_PORT = env_config("EMAIL_PORT", default=587, cast=int)
# EMAIL_USE_TLS = env_config("EMAIL_USE_TLS", default=True, cast=bool)
# EMAIL_HOST_USER = env_config("EMAIL_HOST_USER", default="")
# EMAIL_HOST_PASSWORD = env_config("EMAIL_HOST_PASSWORD", default="")
# DEFAULT_FROM_EMAIL = env_config(
#     "DEFAULT_FROM_EMAIL", default="noreply@airecipes.com")

# Email Settings
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT') or 587)

AUTH_USER_MODEL = 'customUser.CustomUser'

# # CORS settings
# CORS_ALLOW_ALL_ORIGINS = env_config(
#     "CORS_ALLOW_ALL_ORIGINS", default=True, cast=bool)
# CORS_ALLOWED_ORIGINS = env_config(
#     "CORS_ALLOWED_ORIGINS",
#     default="http://localhost:3000,http://127.0.0.1:3000",
#     cast=lambda v: [s.strip() for s in v.split(",")],
# )

# CORS_ALLOW_CREDENTIALS = True

print(f"OpenAI API Key available: {'Yes' if os.getenv('OPENAI_API_KEY') else 'No'}")
